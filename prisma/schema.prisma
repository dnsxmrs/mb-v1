generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  clerkId         String?   @unique @db.VarChar(100) // Optional, unique when present
  email           String    @unique @db.VarChar(255)
  first_name      String    @db.VarChar(100)
  last_name       String    @db.VarChar(100)
  role            String    @default("student") @db.VarChar(50) // "admin", "clerk", etc.
  status          String    @default("active") @db.VarChar(50)
  created_at      DateTime  @default(now())
  modified_at     DateTime  @default(now())
  deleted_at      DateTime?

  CreatedCodes Code[] @relation("CodeCreator") // creator of codes
}

model Story {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String?   @db.Text
  fileLink    String
  subtitles   String[]  @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  QuizItems   QuizItem[]
  Codes       Code[]
  Submissions StudentSubmission[]
}

model QuizItem {
  id            Int       @id @default(autoincrement())
  storyId       Int
  quizNumber    Int
  question      String    @db.Text
  choices       String[]  @db.Text
  correctAnswer String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  Story   Story           @relation(fields: [storyId], references: [id], onDelete: Cascade)
  Answers StudentAnswer[]
}

model Code {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  storyId     Int
  createdById Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  Story       Story               @relation(fields: [storyId], references: [id], onDelete: Cascade)
  Creator     User                @relation("CodeCreator", fields: [createdById], references: [id], onDelete: Cascade)
  Submissions StudentSubmission[]
}

model StudentSubmission {
  id          Int       @id @default(autoincrement())
  codeId      Int
  storyId     Int
  fullName    String    @db.VarChar(255)
  section     String    @db.VarChar(100)
  submittedAt DateTime  @default(now())
  score       Float? // Nullable until evaluated
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  Code    Code            @relation(fields: [codeId], references: [id], onDelete: Cascade)
  Story   Story           @relation(fields: [storyId], references: [id], onDelete: Cascade)
  Answers StudentAnswer[]
}

model StudentAnswer {
  id             Int       @id @default(autoincrement())
  submissionId   Int
  quizItemId     Int
  selectedAnswer String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  Submission StudentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  QuizItem   QuizItem          @relation(fields: [quizItemId], references: [id], onDelete: Cascade)
}
