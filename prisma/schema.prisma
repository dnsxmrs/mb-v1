generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @db.VarChar(255)
  first_name    String         @db.VarChar(100)
  last_name     String         @db.VarChar(100)
  role          String         @default("student") @db.VarChar(50)
  status        String         @default("active") @db.VarChar(50)
  created_at    DateTime       @default(now())
  modified_at   DateTime       @default(now())
  deleted_at    DateTime?
  CreatedCodes  Code[]         @relation("CodeCreator")
  Notifications Notification[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  Stories     Story[]
}

model Story {
  id          Int                 @id @default(autoincrement())
  categoryId  Int                 @default(0)
  title       String              @db.VarChar(255)
  description String?
  fileLink    String
  subtitles   String[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deletedAt   DateTime?
  author      String              @default("Anonymous") @db.VarChar(100)
  Codes       Code[]
  QuizItems   QuizItem[]
  Submissions StudentSubmission[]
  StoryViews  StudentStoryView[]
  category    Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model QuizItem {
  id            Int             @id @default(autoincrement())
  storyId       Int
  quizNumber    Int
  question      String
  correctAnswer String
  createdAt     DateTime        @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime        @updatedAt
  choices       Choice[]
  Story         Story           @relation(fields: [storyId], references: [id], onDelete: Cascade)
  Answers       StudentAnswer[]
}

model Code {
  id          Int                 @id @default(autoincrement())
  code        String              @unique
  storyId     Int
  createdById Int
  createdAt   DateTime            @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime            @updatedAt
  status      String              @default("active") @db.VarChar(50)
  Creator     User                @relation("CodeCreator", fields: [createdById], references: [id], onDelete: Cascade)
  Story       Story               @relation(fields: [storyId], references: [id], onDelete: Cascade)
  Submissions StudentSubmission[]
  StoryViews  StudentStoryView[]
}

model StudentStoryView {
  id        Int      @id @default(autoincrement())
  codeId    Int
  storyId   Int
  fullName  String   @db.VarChar(255)
  section   String   @db.VarChar(100)
  deviceId  String   @default("") @db.VarChar(255)
  viewedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  Code      Code     @relation(fields: [codeId], references: [id], onDelete: Cascade)
  Story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([codeId, storyId, fullName, section, deviceId])
}

model StudentSubmission {
  id          Int             @id @default(autoincrement())
  codeId      Int
  storyId     Int
  fullName    String          @db.VarChar(255)
  section     String          @db.VarChar(100)
  deviceId    String          @default("") @db.VarChar(255)
  submittedAt DateTime        @default(now())
  score       Int?
  deletedAt   DateTime?
  Answers     StudentAnswer[]
  Code        Code            @relation(fields: [codeId], references: [id], onDelete: Cascade)
  Story       Story           @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model StudentAnswer {
  id             Int               @id @default(autoincrement())
  submissionId   Int
  quizItemId     Int
  selectedAnswer String
  createdAt      DateTime          @default(now())
  deletedAt      DateTime?
  updatedAt      DateTime          @updatedAt
  QuizItem       QuizItem          @relation(fields: [quizItemId], references: [id], onDelete: Cascade)
  Submission     StudentSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Choice {
  id         Int       @id @default(autoincrement())
  text       String    @db.VarChar(255)
  quizItemId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  QuizItem   QuizItem  @relation(fields: [quizItemId], references: [id], onDelete: Cascade)
}

model SystemConfig {
  id                  Int      @id @default(autoincrement())
  defaultChoicesCount Int      @default(2)
  maxChoicesCount     Int      @default(10)
  minChoicesCount     Int      @default(2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("system_config")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int?
  type      String   @db.VarChar(50)
  message   String   @db.VarChar(255)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WordSearch {
  id          Int              @id @default(autoincrement())
  title       String           @db.VarChar(255) // e.g., "Animals", "Fruits"
  description String?          @db.VarChar(255)
  status      String           @default("active") @db.VarChar(50)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  items       WordSearchItem[]
}

model WordSearchItem {
  id           Int        @id @default(autoincrement())
  wordSearchId Int
  word         String     @db.VarChar(255)
  description  String?    @db.VarChar(255) // e.g., for text-to-speech
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  WordSearch   WordSearch @relation(fields: [wordSearchId], references: [id], onDelete: Cascade)

  @@unique([wordSearchId, word]) // prevent duplicate words in same puzzle
}

// model MysteryBox {
//   id          Int      @id @default(autoincrement())
//   title       String   @db.VarChar(255)
//   description String?  @db.VarChar(255)
//   status      String   @default("active") @db.VarChar(50)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   deletedAt   DateTime?
//   items       MysteryBoxItem[]
// }

model MysteryBoxItem {
  id          Int       @id @default(autoincrement())
  // mysteryBoxId Int
  word        String    @db.VarChar(255)
  description String?   @db.VarChar(255)
  imageUrl    String?   @db.VarChar(255) // URL to item image
  status      String    @default("active") @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  // MysteryBox   MysteryBox @relation(fields: [mysteryBoxId], references: [id], onDelete: Cascade)

  @@unique([word]) // prevent duplicate items in same box
}
